/*
	CDYNEWeatherReturn.h
	The implementation of properties and methods for the CDYNEWeatherReturn object.
	Generated by SudzC.com
*/
#import "CDYNEWeatherReturn.h"

@implementation CDYNEWeatherReturn
	@synthesize Success = _Success;
	@synthesize ResponseText = _ResponseText;
	@synthesize State = _State;
	@synthesize City = _City;
	@synthesize WeatherStationCity = _WeatherStationCity;
	@synthesize WeatherID = _WeatherID;
	@synthesize Description = _Description;
	@synthesize Temperature = _Temperature;
	@synthesize RelativeHumidity = _RelativeHumidity;
	@synthesize Wind = _Wind;
	@synthesize Pressure = _Pressure;
	@synthesize Visibility = _Visibility;
	@synthesize WindChill = _WindChill;
	@synthesize Remarks = _Remarks;

	- (id) init
	{
		if(self = [super init])
		{
			self.ResponseText = nil;
			self.State = nil;
			self.City = nil;
			self.WeatherStationCity = nil;
			self.Description = nil;
			self.Temperature = nil;
			self.RelativeHumidity = nil;
			self.Wind = nil;
			self.Pressure = nil;
			self.Visibility = nil;
			self.WindChill = nil;
			self.Remarks = nil;

		}
		return self;
	}

	+ (CDYNEWeatherReturn*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CDYNEWeatherReturn*)[[[CDYNEWeatherReturn alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Success = [[Soap getNodeValue: node withName: @"Success"] boolValue];
			self.ResponseText = [Soap getNodeValue: node withName: @"ResponseText"];
			self.State = [Soap getNodeValue: node withName: @"State"];
			self.City = [Soap getNodeValue: node withName: @"City"];
			self.WeatherStationCity = [Soap getNodeValue: node withName: @"WeatherStationCity"];
			self.WeatherID = (short)[[Soap getNodeValue: node withName: @"WeatherID"] intValue];
			self.Description = [Soap getNodeValue: node withName: @"Description"];
			self.Temperature = [Soap getNodeValue: node withName: @"Temperature"];
			self.RelativeHumidity = [Soap getNodeValue: node withName: @"RelativeHumidity"];
			self.Wind = [Soap getNodeValue: node withName: @"Wind"];
			self.Pressure = [Soap getNodeValue: node withName: @"Pressure"];
			self.Visibility = [Soap getNodeValue: node withName: @"Visibility"];
			self.WindChill = [Soap getNodeValue: node withName: @"WindChill"];
			self.Remarks = [Soap getNodeValue: node withName: @"Remarks"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"WeatherReturn"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<Success>%@</Success>", (self.Success)?@"true":@"false"];
		if (self.ResponseText != nil) [s appendFormat: @"<ResponseText>%@</ResponseText>", [[self.ResponseText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.State != nil) [s appendFormat: @"<State>%@</State>", [[self.State stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.City != nil) [s appendFormat: @"<City>%@</City>", [[self.City stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.WeatherStationCity != nil) [s appendFormat: @"<WeatherStationCity>%@</WeatherStationCity>", [[self.WeatherStationCity stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<WeatherID>%@</WeatherID>", [NSString stringWithFormat: @"%i", self.WeatherID]];
		if (self.Description != nil) [s appendFormat: @"<Description>%@</Description>", [[self.Description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Temperature != nil) [s appendFormat: @"<Temperature>%@</Temperature>", [[self.Temperature stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.RelativeHumidity != nil) [s appendFormat: @"<RelativeHumidity>%@</RelativeHumidity>", [[self.RelativeHumidity stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Wind != nil) [s appendFormat: @"<Wind>%@</Wind>", [[self.Wind stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Pressure != nil) [s appendFormat: @"<Pressure>%@</Pressure>", [[self.Pressure stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Visibility != nil) [s appendFormat: @"<Visibility>%@</Visibility>", [[self.Visibility stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.WindChill != nil) [s appendFormat: @"<WindChill>%@</WindChill>", [[self.WindChill stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Remarks != nil) [s appendFormat: @"<Remarks>%@</Remarks>", [[self.Remarks stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CDYNEWeatherReturn class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.ResponseText != nil) { [self.ResponseText release]; }
		if(self.State != nil) { [self.State release]; }
		if(self.City != nil) { [self.City release]; }
		if(self.WeatherStationCity != nil) { [self.WeatherStationCity release]; }
		if(self.Description != nil) { [self.Description release]; }
		if(self.Temperature != nil) { [self.Temperature release]; }
		if(self.RelativeHumidity != nil) { [self.RelativeHumidity release]; }
		if(self.Wind != nil) { [self.Wind release]; }
		if(self.Pressure != nil) { [self.Pressure release]; }
		if(self.Visibility != nil) { [self.Visibility release]; }
		if(self.WindChill != nil) { [self.WindChill release]; }
		if(self.Remarks != nil) { [self.Remarks release]; }
		[super dealloc];
	}

@end
